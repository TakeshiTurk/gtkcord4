name: Build

on:
  workflow_dispatch:
    inputs:
      targets:
        description: Build targets (separated by spaces)
        type: string
        default: x86_64 aarch64
  workflow_call:
    inputs:
      targets:
        description: Build targets (separated by spaces)
        type: string
        default: x86_64 aarch64
  push:
  release:
    types: [published]

concurrency:
  group: build
  cancel-in-progress: true

env:
  cache-install: diamondburned/cache-install@3c3ac40a3f928c99efd165b900b265b26da4e175

jobs:
  # We need a whole ass job for this.
  # https://docs.github.com/en/actions/learn-github-actions/expressions#example-returning-a-json-object
  init:
    name: Initialize
    runs-on: ubuntu-latest
    outputs:
      target-matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-targets
        run: |
          if [[ "$TARGETS" == "" ]]; then
            case "$ACTION" in
            push|release)
              TARGETS="x86_64 aarch64" ;;
            *)
              echo "Unknown action: $ACTION"
              exit 1 ;;
            esac
          fi
          echo "targets=$TARGETS" >> $GITHUB_OUTPUT
        env:
          ACTION: ${{ github.event_name }}
          TARGETS: ${{ inputs.targets }}

      - id: set-matrix
        run: |
          echo "matrix=$(printf "%s\n" $TARGETS | jq -R | jq -sc)" >> $GITHUB_OUTPUT
        env:
          TARGETS: ${{ steps.set-targets.outputs.targets }}

  build:
    name: Build
    needs: init
    runs-on: ubuntu-latest
    outputs:
      output-directory: ${{ steps.build.outputs.output-directory }}
    strategy:
      fail-fast: true
      matrix:
        target: ${{ fromJSON(needs.init.outputs.target-matrix) }}
        tags:
          - [""]
          - ["libadwaita"]
    steps:
      - uses: actions/checkout@v3

      - name: Initialize environment
        id: init
        run: |
          cat<<EOF > /tmp/expr.nix
          import ./nix {
            action = "build-cross";
            target = $TARGET;
            tags   = $TAGS;
          }
          EOF
          # GitHub doesn't allow multiline strings in outputs, so we trim the
          # new lines.
          echo "expr=$(cat /tmp/expr.nix | tr -d $'\n')" >> $GITHUB_OUTPUT
        env:
          TARGET: ${{ toJSON(matrix.target) }}
          TAGS: ${{ toJSON(matrix.tags) }}

      - name: Install Nix packages
        id: nix-install
        uses: ./.github/actions/init-nix
        with:
          instantiated-expression: ${{ steps.init.outputs.expr }}

      - name: Build
        id: build
        run: |
          out=$(nix-build -E "$EXPR" --no-out-link)
          echo "output-directory=$out" >> $GITHUB_OUTPUT
        env:
          EXPR: ${{ steps.init.outputs.expr }}

      - name: Upload artifacts
        id: upload
        uses: actions/upload-artifact@v2
        with:
          name: build-outputs
          path: ${{ steps.build.outputs.output-directory }}
