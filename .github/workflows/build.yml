name: Build

on:
  workflow_dispatch:
    inputs:
      targets:
        description: Build targets (separated by spaces)
        type: string
        default: x86_64 aarch64
  workflow_call:
    inputs:
      targets:
        description: Build targets (separated by spaces)
        type: string
        default: x86_64 aarch64
  push:
    branches-ignore:
      - nightly
  release:
    types: [released] # Prevents double builds on nightly

jobs:
  # We need a whole ass job for this.
  # https://docs.github.com/en/actions/learn-github-actions/expressions#example-returning-a-json-object
  init:
    name: Initialize
    runs-on: ubuntu-latest
    outputs:
      target-matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-targets
        run: |
          if [[ "$TARGETS" == "" ]]; then
            case "$ACTION" in
            push|release)
              TARGETS="x86_64 aarch64" ;;
            *)
              echo "Unknown action: $ACTION"
              exit 1 ;;
            esac
          fi
          echo "targets=$TARGETS" >> $GITHUB_OUTPUT
        env:
          ACTION: ${{ github.event_name }}
          TARGETS: ${{ inputs.targets }}

      - id: set-matrix
        run: |
          echo "matrix=$(printf "%s\n" $TARGETS | jq -R | jq -sc)" >> $GITHUB_OUTPUT
        env:
          TARGETS: ${{ steps.set-targets.outputs.targets }}

  # gomod2nix:
  #   name: Update gomod2nix
  #   runs-on: ubuntu-latest
  #   outputs: 

  build:
    name: Build
    needs: init
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.build.outputs.name }}
      directory: ${{ steps.build.outputs.directory }}
    strategy:
      fail-fast: true
      matrix:
        target: ${{ fromJSON(needs.init.outputs.target-matrix) }}
        tags:
          - [""]
          - ["libadwaita"]
    steps:
      - uses: actions/checkout@v3

      - name: Initialize environment
        id: init
        run: |
          cat<<EOF > /tmp/expr.nix
          import ./nix {
            action = "build-cross";
            target = $TARGET;
            tags   = $TAGS;
          }
          EOF
          # GitHub doesn't allow multiline strings in outputs, so we trim the
          # new lines.
          echo "expr=$(cat /tmp/expr.nix | tr -d $'\n')" >> $GITHUB_OUTPUT
        env:
          TARGET: ${{ toJSON(matrix.target) }}
          TAGS: ${{ toJSON(matrix.tags) }}

      - name: Install Nix environment
        uses: ./.github/actions/init-nix
        with:
          instantiated-expression: ${{ steps.init.outputs.expr }}

      - name: Build
        id: build
        run: |
          out=$(nix-build -E "$EXPR" --no-out-link)
          echo "directory=$out" >> $GITHUB_OUTPUT

          target=$(jq -r '.' <<< "$TARGET")
          tags=$(jq -r '. | join("+")' <<< "$TAGS")
          echo "name=${target}${tags:+-"$tags"}" >> $GITHUB_OUTPUT
        env:
          EXPR: ${{ steps.init.outputs.expr }}
          TARGET: ${{ toJSON(matrix.target) }}
          TAGS: ${{ toJSON(matrix.tags) }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: gtkcord4-${{ steps.build.outputs.name }}
          path: ${{ steps.build.outputs.directory }}

  upload-release:
    name: Upload artifacts to release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Install Nix shell
        uses: ./.github/actions/init-nix
        with:
          shell-file: shell.nix

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Upload artifacts to GitHub Releases
        run: upload-artifacts artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ github.event.release.id }}

  nightly-release:
    name: Update nightly release
    needs: build
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    if: github.event_name == 'push'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Collect built artifacts
        run: mkdir bin && find artifacts -type f -exec mv {} bin \;

      - name: Update nightly release
        uses: andelf/nightly-release@ce2d0a30db8cf9f3920a4237d6a0b874400710c1
        with:
          name: Nightly Release
          tag_name: nightly
          prerelease: true
          files: bin/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

